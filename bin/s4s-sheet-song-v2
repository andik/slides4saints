#!/bin/sh
# the next line runs script as wish\
exec wish "$0" "$@"

package require s4s-set
package require s4s-toolbar
package require s4s-dialog
package require s4s-tkabc
package require s4s-canvas
package require s4s-canvas-pencil

encoding system utf-8

if { ![info exists env(S4S_USER)] } {
    error "S4S_USER Environment Variable needs to be set"
}

if {[llength $::argv] == 0} {
    error "you need to supply files on the command line for a working sheetview."
}	  

set maxpageid 0
set pencil ""
set Fill red
set X 0
set Y 0

set text_annotations [list]

set undo [dict create]

set mode "none"

set Pages [list]
set PageIdx 0
set Page ""
set Files [lmap song $argv {file join $song sheets "$::env(S4S_USER).s4s-sheet"}]
set Title ""
set File [lindex $Files 0]
set FileIdx 0
set AttachmentDir ""
set Images [dict create]
set CurImage ""
set MidiProg 0
set Selected ""
set ToDelete ""

set StaffCounter 0
set StaffContent [dict create]

set safeprops [list \
	text -text \
	text -font \
	text -justify \
	text -anchor \
	text -fill \
	line -width \
	line -fill \
	image -image \
	image -anchor \
]


font create PaintFont -family Arial -size 16

# ---------------------------------------------------------------------------

proc edit-text-confirm {canvas tag} {
	edit-text-apply $canvas $tag
	destroy .dlg
}

# ---------------------------------------------------------------------------

proc edit-text-apply {canvas tag} {
	$canvas itemconfigure $tag -text [.dlg.edit get 1.0 end]
}

# ---------------------------------------------------------------------------

proc edit-text-delete {canvas tag} {
	$canvas delete $tag
	destroy .dlg
}

# ---------------------------------------------------------------------------

proc edit-text {canvas tag} {
	s4s-dialog .dlg "Edit Text" {

		text .dlg.edit -font TkDefaultFont
		pack [label .dlg.lbl -text "Press CTRL-Return to save or Escape to cancel"]
		pack .dlg.edit -fill x -fill y

		s4s-toolbar .dlg.toolbar [subst {
			ttk::button  "Ok"      "edit-text-confirm $canvas $tag" {}
			ttk::button  "Apply"   "edit-text-apply   $canvas $tag" {}
			ttk::button  "Delete"  "edit-text-delete  $canvas $tag" {}
			ttk::button  "Cancel"  "destroy .dlg"                   {}
		}]

		pack .dlg.toolbar -fill x

		.dlg.edit insert 1.0 [$canvas itemcget $tag -text]

		bind .dlg.edit <Escape> {destroy .dlg; break}
		bind .dlg.edit <Control-Return> "edit-text-confirm $canvas $tag; break"

		focus .dlg.edit
	}
}

# ---------------------------------------------------------------------------

proc edit-midi-confirm {} {
	set ::MidiProg $::MidiProgEdit
	destroy .dlg
}

# ---------------------------------------------------------------------------

proc edit-midi {} {
	s4s-dialog .dlg "Edit Midi Program" {
	
		set ::MidiProgEdit $::MidiProg
		entry .dlg.edit -textvariable MidiProgEdit

		pack [label .dlg.lbl -text "Press CTRL-Return to save or Escape to cancel"]
		pack .dlg.edit -fill x -fill y

		s4s-toolbar .dlg.toolbar -common {-width 10} {
			ttk::button "Ok"     "edit-midi-confirm" {}
			ttk::button "Cancel" "destroy .dlg"      {}
		}
		pack .dlg.toolbar -fill x

		bind .dlg.edit <Escape> {destroy .dlg; break}
		bind .dlg.edit <Return> {"edit-midi-confirm"}

		focus .dlg.edit

	}
}

# ---------------------------------------------------------------------------

proc get-abc {} {
	s4s-dialog .dlg "Get Note line" {

		set ::get_abc_abc ""
	
		pack [label .dlg.lbl -text "Press CTRL-Return to save or Escape to cancel"] -fill x

		entry .dlg.edit -textvariable ::get_abc_abc
		pack .dlg.edit -fill x
		
		canvas .dlg.abc -bg white
		s4s-tkabc::render .dlg.abc abctest $::get_abc_abc 
		pack .dlg.abc -fill x

		
		s4s-toolbar .dlg.toolbar -common {-width 10} {
			ttk::button "Ok"     "destroy .dlg" {}
			ttk::button "Cancel" "set get_abc_abc; destroy .dlg" {}
		}
		pack .dlg.toolbar -fill x

		bind .dlg.edit <Escape> {set get_abc_abc ""; destroy .dlg; break}
		bind .dlg.edit <Return> {destroy .dlg}
		bind .dlg.edit <KeyRelease> {
			.dlg.abc delete all
			s4s-tkabc::render .dlg.abc abctest $::get_abc_abc
		}

		focus .dlg.edit
	}
}

# ---------------------------------------------------------------------------

proc add-text {canvas x y} {
	global text_annotations 
	set t [$canvas create text $x $y -text "" -justify left -anchor nw -font PaintFont -fill red]
	edit-text $canvas $t
	if {[$canvas itemcget $t -text] ne ""} {
		lappend text_annotations $t
	} else {
		$canvas delete $t
	}
	return $t
}

# ---------------------------------------------------------------------------

proc on-canvas-move(text) {w x y} {}
proc on-canvas-press(text) {w x y} {}
proc on-canvas-release(text) {w x y} {
	set current [object-hit $w $x $y text]
	if {[llength $current] > 0} {
		edit-text $w $current
	} else {
		add-text $w $x $y
	}
}

# ---------------------------------------------------------------------------

proc action-insert-png {{fn {}}} {
		global env
		set page [lindex $::Pages $::PageIdx]
	  set name [exec s4s-select-file-from-folder "Select Image" $::AttachmentDir "*.png"]
    if {$name ne ""} {
    	s4s-canvas::draw $page image 0 0 -image $name -anchor nw
    }
}

# ---------------------------------------------------------------------------

proc action-delete-obj {} {
	set page [lindex $::Pages $::PageIdx]
	s4s-canvas::delete-selected $page
}

# ---------------------------------------------------------------------------

proc switch-page {idx} {
	set num_pages [llength $::Pages]
	set selected_page [lindex $::Pages $::PageIdx]
	set idx [expr {min($idx, $num_pages-1)}]
	set idx [expr {max($idx, 0)}]
	set next_page [lindex $::Pages $idx]
	pack forget $selected_page
	pack $next_page -expand true -fill both
	set ::PageIdx $idx
	set ::Page $next_page
}

# ---------------------------------------------------------------------------

proc switch-page-by {delta} {
	switch-page [expr {$::PageIdx + $delta}]
}

# ---------------------------------------------------------------------------

proc add-page {} {
	incr ::maxpageid
	set path ".pages.p$::maxpageid"
	lappend ::Pages [canvas $path -bg white -relief flat]
	switch-page [expr {[llength $::Pages] - 1}]

	s4s-canvas::hookup $path

	s4s-canvas::register-obj $path staff draw-staff
	s4s-canvas::register-obj $path text draw-text
	s4s-canvas::register-obj $path image draw-image

	s4s-canvas-pencil::register-style line -fill #f00 -width 3
	s4s-canvas-pencil::hookup $path line
}

# ---------------------------------------------------------------------------

proc del-page {} {
	set path [lindex $::Pages $::PageIdx]
	set ::Pages [lreplace $::Pages $::PageIdx $::PageIdx]
	destroy $path
	s4s-canvas::reset $path
	if {[llength $::Pages] == 0} {add-page}
	switch-page-by 0
}

# reset the application completely
# ---------------------------------------------------------------------------

proc reset-application {} {
	# clear image list
	set ::Images [dict create]
	set ::CurImage ""
	set ::StaffContent [dict create]
	set ::StaffCounter 0

	foreach img [image names] {
		image delete $img
	}

	# remove all pages (exept of the first empty...)
	set num_pages [llength $::Pages]
	for {set i 0} {$i < $num_pages} {incr i} {
		del-page
	}
}

# ---------------------------------------------------------------------------

proc save-to-file {} {
	set output [list]
	set pagecount 0
	
	# save the midi program
	lappend output "midiprog $::MidiProg"

	# save pages content
	foreach page $::Pages {
		set written_groups [list]
		$page delete selbox
		
		if {$pagecount > 0} {
			lappend output "add-page"
		}

		# save objects of page
		foreach {tag cmd} [s4s-canvas::dump $page] {
			lappend output [concat draw $cmd]
		}

		incr pagecount
	}

	# check for output directory
	if {![file exists $::SheetDir]} {
		file mkdir $::SheetDir
	}

	# write output to file
	set f [open $::File "w"]
	foreach line $output {
		puts $f $line
	}
	close $f
}

# ---------------------------------------------------------------------------

proc load-from-file {} {
    reset-application
		set song [file normalize [file join $::File .. .. ]]
		set ::AttachmentDir [file join $song attachments]
		set ::SheetDir [file join $song sheets]
		set ::Title [file rootname [file tail $song]]
		set ::undo [dict create]

    if {[file exists $::File]} {
			# safe interpreter 
			set si [interp create -safe]
			$si alias add-page add-page
			$si alias draw draw
			$si alias midiprog midiprog
			set f [open $::File]
			set src [read $f]
			close $f
			$si eval $src
			interp delete $si
			switch-page 0
    }
}

# ---------------------------------------------------------------------------

proc draw {args} {
	set path [lindex $::Pages $::PageIdx]
	puts "drawing $args"
	s4s-canvas::draw $path {*}$args
}

# ---------------------------------------------------------------------------

proc midiprog {programnum} {
	set ::MidiProg $programnum
	catch {exec "midi-progchange" $programnum}
}

# ---------------------------------------------------------------------------

proc draw-text {path x y args} {
	return [$path create text $x $y {*}$args]
}

# ---------------------------------------------------------------------------

proc draw-staff {path x y content} {
	set stafftag staff-$::StaffCounter
	dict set ::StaffContent $stafftag [list $x $y $content]
	incr ::StaffCounter
	s4s-tkabc::render $path $stafftag $content
	puts [$path bbox $stafftag]
	return $stafftag
}

# ---------------------------------------------------------------------------

proc draw-image {path x y args} {
	for {set i 1} {$i < [llength $args]} {incr i} {
		if {[lindex $args $i] eq "-image"} {
			set image [lindex $args $i+1]
			image create photo $name -file [file join $::AttachmentDir $imange]
		}
	}
	return [$path create image $x $y {*}$args]
}

# ---------------------------------------------------------------------------

proc insert-staff {} {
	set path [lindex $::Pages $::PageIdx]	
	get-abc
	if {$::get_abc_abc ne ""} {
		draw-staff $path 0 0 $::get_abc_abc
	}
}

# ---------------------------------------------------------------------------

proc switch-file {idx} {
    if {$idx >= 0 && $idx < [llength $::Files]} {
		set ::FileIdx $idx
		set ::File [lindex $::Files $::FileIdx]
		load-from-file
    }
}

# ---------------------------------------------------------------------------

proc switch-file-by {offset} {
    switch-file [expr {$::FileIdx + $offset}]
}

set fullscreen 0
# ---------------------------------------------------------------------------

proc toggle-fullscreen {} {
	global fullscreen
	set fullscreen [expr {!$fullscreen}]
	wm attributes . -fullscreen $fullscreen
}

# ---------------------------------------------------------------------------

proc remove-data-dir {filename} {
	global env
	set nfn [file normalize $filename]
	set ddir [file normalize $env(S4S_DATA_DIR)]
	if {[string first $ddir $nfn] == 0} {
		set len [string length $ddir]
		set filename [string range $nfn $len+1 end]
	}
	return $filename
}

# ---------------------------------------------------------------------------

proc open-attachments {} {
	exec s4s-open-folder $::AttachmentDir
}

# ---------------------------------------------------------------------------

proc update-mode {} {
	global mode
	set path [lindex $::Pages $::PageIdx]
	s4s-canvas::set-mode $path $mode
}

# ===========================================================================

# create the UI
# =============

# widget          label        command                 parameters to widget
s4s-toolbar .toolbar -common {-width 4} {
	ttk::button      "Save"            {save-to-file}         {}
	-                {}                {}                     {}
	ttk::button      "<<"              {switch-file-by -1}    {}
	ttk::button      "File"            {load-from-file}       {-textvariable Title -width 20}
	ttk::button      ">>"              {switch-file-by 1}     {}
	-                {}                {}                     {}
	ttk::button      "<"               {switch-page-by -1}    {}
	ttk::button      "0"               {switch-page-by 0}     {-textvariable PageIdx -width 8}
	ttk::button      ">"               {switch-page-by 1}     {}
	-                {}                {}                     {}
	ttk::button      "+Pg"             {add-page}             {}
	ttk::button      "-Pg"             {del-page}             {}
	-                {}                {}                     {}
	ttk::radiobutton "None"            {update-mode}          {-variable mode -value none -width 6}
	ttk::radiobutton "Edit"            {update-mode}          {-variable mode -value edit -width 6}
	ttk::radiobutton "Draw"            {update-mode}          {-variable mode -value line -width 6}
	ttk::radiobutton "Text"            {update-mode}          {-variable mode -value text -width 6}
	-                {}                {}                     {}
	ttk::button      "Delete"          {action-delete-obj}           {-width 6}
	-                {}                {}                     {}
	ttk::button      "Image..."        {action-insert-png}           {-width 8}
	ttk::button      "Staff..."        {insert-staff}         {-width 8}
	-                {}                {}                     {}
	ttk::button      "MIDI"            {edit-midi}            {-width 8}
	ttk::button      "Attachments..."  {open-attachments}     {-width 12}
}

console show

pack [frame .pages] -fill both -expand true

set mode none

add-page
switch-file-by 0

bind . <Right> {switch-page-by 1; break}
bind . <Left>  {switch-page-by -1; break}
bind . <Down>  {switch-file-by 1; break}
bind . <Up>    {switch-file-by -1; break}
bind . <s>     {save-to-file}
bind . <Control-s>   {save-to-file}
bind . <F1> 	"set mode none"   
bind . <F2> 	"set mode draw"   
bind . <F3> 	"set mode erase" 
bind . <F4> 	"set mode text"  
bind . <F5> 	"set mode move"  
bind . <F6> 	"action-insert-png"       

bind . <F11>  "toggle-fullscreen"
