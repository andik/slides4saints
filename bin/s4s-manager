#!/bin/sh
# the next line restarts using wish \
exec wish8.6 "$0" "$@"

package require s4s-table 1.0

set elems [dict create]

set needle ""

set data_dir $env(S4S_DATA_DIR)

# we introduce some very basic types, so that they do not
# get omitted if there is no content for them
# this needs to be fixed by some kind of type registry...
dict set elems set  [list]
dict set elems song [list]


# ---------------------------------------------------------------------------

proc pattern-from-needle {needle} {
	return "*[join [split $needle ""] "*"]*"
}


# ---------------------------------------------------------------------------

proc pattern-match {pattern el} {
	set name [lindex $el 0]
	return [string match -nocase $pattern $name]
}


# ---------------------------------------------------------------------------

proc read-data-dir {} {
	global elems

	set elems [dict create]

		# add all relevant stuff to the list
	set ls [open "| s4s-ls"]

	set elems_for_type [list]
	while {[gets $ls line] >= 0} {
		lassign [split $line] type filename
		set name [file tail [file rootname $filename]]
		set path [file dirname $filename]
		dict lappend elems $type [list $name $path]
	}

	# sort all sublists
	foreach type [dict keys $elems] {
		dict set elems $type [lsort -index 0 [dict get $elems $type]]
	}

	close $ls
}


# ---------------------------------------------------------------------------

proc update-ui {} {
	global elems needle

	set type [get-selected-type]

	s4s-table::set-elems .s [dict get $elems $type]
	s4s-table::set-filter .s $needle 0

	return 1
}

# ===========================================================================

# Types Notebook and Files therein
# --------------------------------

read-data-dir

pack [ttk::notebook .nb] -fill x
ttk::notebook::enableTraversal .nb

foreach type [dict keys $elems] {
	frame .nb.$type
	.nb add .nb.$type -text [string totitle "${type}s"]
}
ttk::notebook::enableTraversal .nb

bind .nb <<NotebookTabChanged>> update-ui


s4s-table::create .s [list Name Path] [list]

pack .s -fill both -expand 1

# Toolbar
# -------
pack [frame .toolbar] -fill x

# TODO i18n
pack [button .toolbar.create  -text "Add..." -command {action-create}] -side left
pack [button .toolbar.delete  -text "Delete..." -command {action-delete}] -side left
pack [button .toolbar.move   -text "Move..." -command {action-move}] -side left
pack [label .toolbar.spacer  -text "  " ] -side left
pack [button .toolbar.edit  -text "Edit..." -command {action-do edit}] -side left
pack [button .toolbar.print -text "Print..." -command {action-do print}] -side left
pack [button .toolbar.extopen -text "Open Extern..." -command {action-do extopen}] -side left
pack [label .toolbar.spacer2  -text "  " ] -side left
pack [button .toolbar.sheet -text "Sheet..." -command {action-do sheet}] -side left
pack [label .toolbar.spacer3  -text "  " ] -side left
pack [button .toolbar.present -text "Present..." -command {action-do present}] -side left
pack [label .toolbar.spacer4  -text "  " ] -side left

pack [label .toolbar.searchlbl -text "Search:"] -side left
pack [ttk::entry .toolbar.search -text "slides4saints" -textvariable needle] -side left
pack [button .toolbar.searchcl -text "X" -command {action-clear-search}] -side left
pack [label .toolbar.logo -text "slides4saints"] -side right

wm title . "slides4saints manager - user '$env(S4S_USER)'"

bind .toolbar.search <Escape> action-clear-search
bind .toolbar.search <KeyRelease> update-ui
bind .toolbar.search <Return> {focus .s.tv}

bind . <Control-n> action-create
bind . <Control-f> {focus .toolbar.search}

# ===========================================================================

# User actions
# ------------

# do something with the file (edit, print, ...)
# this is a single action because every action is forwarded
# to an external script to keep this manager small in LOC

proc action-do {action} {
	global data_dir

	# we get type and filename of the file
	set type     [get-selected-type]
	set basename [get-selected-name]
	set filename [file join $data_dir [get-selected-path] "$basename.s4s-$type"]

	# forward the selected action to the correct binary for the type... thats it
	# the unix way of doing this is really incredible easy...
	exec "s4s-$action-$type" $filename &
}

# ---------------------------------------------------------------------------

proc action-clear-search {} \
{
	.toolbar.search delete 0 end
	update-ui
}

# ---------------------------------------------------------------------------

proc action-delete {} {
	if {[ask-confirm "Delete Entry?"]} {
		action-do delete
	}

	read-data-dir
	update-ui
}

# ---------------------------------------------------------------------------

proc action-create {} {
	set type [get-selected-type]

	set filename [exec "s4s-create-$type"]

	if {$filename ne ""} {
		read-data-dir
		update-ui

		# now edit that file...
		exec "s4s-edit-$type" $filename &
	}
}

# ---------------------------------------------------------------------------

proc action-move {} {
	global data_dir
	set type     [get-selected-type]
	set basename [get-selected-name]
	set filename [file join $data_dir [get-selected-path] "$basename.s4s-$type"]
	
	exec "s4s-move-$type" $filename
	
	read-data-dir
	update-ui
}

# ===========================================================================

# Utilities
# ---------

proc get-selected-type {} {
	return [lindex [split [.nb select] "."] end]
}

# ---------------------------------------------------------------------------

proc get-selected-name {} {
	return  [lindex [s4s-table::selected-elem .s] 0]
}

# ---------------------------------------------------------------------------

proc get-selected-path {} {
	return  [lindex [s4s-table::selected-elem .s] 1]
}

# ---------------------------------------------------------------------------

proc ask-confirm {msg} {
	switch -- [tk_messageBox -message $msg -type yesno] {
		yes { return 1}
		no  { return 0}
	}
}

#update-ui
